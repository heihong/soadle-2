buildscript {
	ext {
		springBootVersion   = '2.0.0.M3'
		swaggerVersion      = '2.3.1'
		httpclientVersion   = '4.5.1'
		lang3Version        = '3.6'
		collections4Version = '4.1'
		gsonVersion         = '2.8.2'
		junitVersion        = '5.0.2'
		assertjVersion      = '3.8.0'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'fr.soat'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-devtools")
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework.security.oauth:spring-security-oauth2")
	compile("org.apache.httpcomponents:httpclient:${httpclientVersion}")
	compile("org.apache.commons:commons-lang3:${lang3Version}")
	compile("org.apache.commons:commons-collections4:${collections4Version}")
	compile("com.h2database:h2")
	compile("io.springfox:springfox-swagger2:${swaggerVersion}")
	compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
	compile("com.google.code.gson:gson:${gsonVersion}");
	
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
	testCompile("org.assertj:assertj-core:${assertjVersion}")
}


def webappDir = "$projectDir/src/main/webapp"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildAngular"
}

task buildAngular(type:Exec) {
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}

task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}

}

junitPlatform {
	reportsDir file('build/test-results/junit-platform') // this is the default
	// enableStandardTestTask true
	// selectors (optional)
	// filters (optional)
    filters {
        engines {
            include 'junit-jupiter'
        }
    }
}
